{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    "next/core-web-vitals",
    "plugin:react/recommended",
    "standard"
  ],
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "react-hooks"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "semi": ["error", "always"], // Always use semicolons
    "space-before-function-paren": ["error", {
      "named": "never",
      "anonymous": "always",
      "asyncArrow": "always"
    }], // Space before function parentheses
    "indent": "off", // Turn off indentation to let ESLint handle it through extends
    "quotes": ["error", "double"], // Always use double quotes for strings
    "react/prop-types": "warn", // Warn if propTypes are not defined for React components
    "react/react-in-jsx-scope": "off", // Disable this rule as Next.js automatically handles React in JSX
    "react-hooks/rules-of-hooks": "error", // Enforce rules of hooks
    "react-hooks/exhaustive-deps": "warn", // Warn about missing dependencies in hooks
    "no-unused-vars": "warn", // Warn about declared but unused variables
    "no-console": "error", // Disallow console.log() in the code (often used for development purposes only)
    "no-debugger": "error", // Disallow debugger statements in the code
    "no-alert": "error", // Disallow alert statements in the code
    "no-eval": "error", // Disallow eval() in the code
    "no-irregular-whitespace": "error", // Disallow irregular whitespace characters
    "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1 }], // Limit maximum number of consecutive empty lines
    "no-trailing-spaces": "error", // Disallow trailing spaces at the end of lines
    "comma-dangle": ["error", "always-multiline"], // Always use trailing commas in multiline object literals
    "object-curly-spacing": ["error", "always"], // Always use spacing inside curly braces of object literals
    "array-bracket-spacing": ["error", "never"], // Never use spaces inside array brackets
    "arrow-spacing": "error", // Enforce consistent spacing before and after arrows of arrow functions
    "key-spacing": ["error", { "beforeColon": false, "afterColon": true }], // Enforce consistent spacing around colons in object literals
    "keyword-spacing": "error", // Enforce consistent spacing after keywords
    "linebreak-style": ["error", "unix"], // Use Unix line endings (\n)
    "no-extra-semi": "error", // Disallow unnecessary semicolons
    "no-multi-spaces": "error", // Disallow multiple spaces
    "prefer-const": "error", // Prefer const over let when the variable is not reassigned
    "prefer-template": "error", // Prefer template literals over string concatenation
    "template-curly-spacing": ["error", "never"], // Never use spaces inside template literals
    "space-in-parens": ["error", "never"], // Never use spaces inside parentheses
    "space-infix-ops": "error", // Enforce spacing around infix operators
    "space-unary-ops": "error", // Enforce spacing before and after unary operators
    "eol-last": ["error", "always"], // Always add a newline at the end of files
    "no-var": "error", // Prefer let or const over var
    "prefer-arrow-callback": "error", // Prefer arrow functions over function expressions
    "no-else-return": "error", // Disallow else blocks after return statements in if blocks
    "no-empty-function": "error", // Disallow empty function declarations
    "no-extra-parens": "error", // Disallow unnecessary parentheses
    "no-extra-boolean-cast": "error", // Disallow unnecessary boolean casts
    "no-unused-expressions": "error", // Disallow unused expressions
    "no-use-before-define": "error", // Disallow use of variables before they are defined
    "curly": "error", // Always use curly braces for control flow structures (if, else, while, etc.)
    "eqeqeq": "error", // Always use strict equality operators (=== and !==)
    "no-implicit-coercion": "error", // Disallow implicit type coercion
    "no-new-wrappers": "error", // Disallow instantiating wrappers for primitive types
    "no-useless-concat": "error", // Disallow unnecessary string concatenation
    "no-useless-return": "error", // Disallow unnecessary return statements
    "prefer-rest-params": "error", // Prefer rest parameters (...) over arguments
    "prefer-spread": "error", // Prefer spread operator (...) over apply()
    "no-duplicate-imports": "error", // Disallow duplicate import statements
    "no-useless-computed-key": "error", // Disallow unnecessary computed keys in objects
    "no-useless-rename": "error", // Disallow unnecessary renaming in imports / exports
    "no-whitespace-before-property": "error", // Disallow whitespace before properties
    "object-shorthand": "error", // Use object shorthand syntax for methods and properties
    "prefer-destructuring": "error", // Prefer destructuring for accessing object properties and array elements
    "rest-spread-spacing": ["error", "never"], // Never use spaces inside spread and rest operators
    "react/jsx-boolean-value": ["error", "always"], // Always use boolean attribute values in JSX without explicit values (e.g., {true} instead of {true={true}})
    "react/jsx-curly-spacing": ["error", { "when": "never", "children": true }], // Never use spaces inside curly braces in JSX, except for children
    "react/jsx-equals-spacing": ["error", "never"], // Never use spaces around equals signs in JSX attributes
    "react/jsx-key": "error", // Require using key prop for list items in JSX
    "react/jsx-no-bind": ["error", { "ignoreDOMComponents": true }], // Disallow using bind() or arrow functions in JSX attributes
    "react/jsx-no-duplicate-props": "error", // Disallow duplicate props in JSX
    "react/jsx-pascal-case": "error", // Use PascalCase for React component names
    "react/jsx-tag-spacing": ["error", { "beforeSelfClosing": "always" }], // Enforce consistent spacing around self-closing JSX tags
    "react/jsx-uses-react": "off", // Turn off this rule as it's not needed with the latest ESLint and React versions
    "react/jsx-uses-vars": "error", // Enforce checking for variables used in JSX
    "react/no-children-prop": "error", // Disallow using the children prop in React components
    "react/no-danger": "error", // Disallow using dangerouslySetInnerHTML to prevent injecting unescaped HTML
    "react/no-deprecated": "error", // Disallow deprecated React functions and methods
    "react/no-direct-mutation-state": "error", // Disallow mutating state directly in React components
    "react/no-find-dom-node": "error", // Disallow using findDOMNode to prevent direct DOM manipulation
    "react/no-render-return-value": "error", // Disallow using the return value of ReactDOM.render
    "react/no-string-refs": "error", // Disallow using string refs
    "react/no-unescaped-entities": "error", // Disallow unescaped entities in JSX
    "react/no-unknown-property": "error", // Disallow unknown props on JSX elements
    "react/no-unused-state": "error", // Warn if state is declared but not used in React components
    "react/prefer-es6-class": "error", // Prefer ES6 classes over createReactClass for React components
    "react/prefer-read-only-props": "error", // Prefer read-only props to enhance immutability
    "react/prefer-stateless-function": "error", // Prefer stateless functional components when possible
    "react/self-closing-comp": "error", // Require self-closing JSX tags when the component has no children
    "react/style-prop-object": "error", // Enforce correct usage of the style prop in JSX
    "react/jsx-no-constructed-context-values": "error", // Disallow using manually constructed context values in JSX
    "react/jsx-no-script-url": "error", // Disallow using javascript: URLs in JSX attributes
    "react/jsx-no-target-blank": "error", // Disallow using target="_blank" without rel="noreferrer noopener" in JSX attributes
    "react/jsx-no-useless-fragment": "error" // Disallow unnecessary JSX fragments (<></>)
  }
}
